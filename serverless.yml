service:
  name: serverless-hoepel-app

plugins:
  - serverless-webpack
  - serverless-offline

package:
  exclude:
    - secrets.yml

custom:
  stage: ${opt:stage, self:provider.stage}
  secrets: ${file(secrets.yml):${self:custom.stage}}

provider:
  name: aws
  runtime: nodejs6.10

  environment:
    DB_HOST: "${self:custom.secrets.DB_HOST}"
    DB_PORT: "${self:custom.secrets.DB_PORT}"
    DB_HTTPS: "${self:custom.secrets.DB_HTTPS}"
    DB_USER: "${self:custom.secrets.DB_USER}"
    DB_PASS: "${self:custom.secrets.DB_PASS}"

functions:
  authorize:
    handler: authorize.handler

  # Day CRUD
  allDays:
    handler: functions/days.all
    events:
      - http:
          method: get
          path: day
          cors: true
          authorizer:
            name: authorize
            resultTtlInSeconds: 0
          request:
            parameters:
              querystrings:
                url: true

  findDay:
    handler: functions/days.byId
    events:
      - http:
          method: get
          path: day/{id}
          cors: true
          authorizer:
            name: authorize
            resultTtlInSeconds: 0
          request:
            paths:
              id: true

  createDay:
    handler: functions/days.create
    events:
      - http:
          method: post
          path: day
          cors: true
          authorizer:
            name: authorize
            resultTtlInSeconds: 0

  updateDay:
    handler: functions/days.update
    events:
      - http:
          method: put
          path: day/{id}
          cors: true
          authorizer:
            name: authorize
            resultTtlInSeconds: 0

  deleteDay:
    handler: functions/days.remove
    events:
      - http:
          method: delete
          path: day/{id}
          cors: true
          authorizer:
            name: authorize
            resultTtlInSeconds: 0


  # Child CRUD
  allChildren:
    handler: functions/children.all
    events:
      - http:
          method: get
          path: child
          cors: true
          authorizer:
            name: authorize
            resultTtlInSeconds: 0
          request:
            parameters:
              querystrings:
                url: true

  findChild:
    handler: functions/children.byId
    events:
      - http:
          method: get
          path: child/{id}
          cors: true
          authorizer:
            name: authorize
            resultTtlInSeconds: 0
          request:
            paths:
              id: true

  createChild:
    handler: functions/children.create
    events:
      - http:
          method: post
          path: child
          cors: true
          authorizer:
            name: authorize
            resultTtlInSeconds: 0

  updateChild:
    handler: functions/children.update
    events:
      - http:
          method: put
          path: child/{id}
          cors: true
          authorizer:
            name: authorize
            resultTtlInSeconds: 0

  deleteChild:
    handler: functions/children.remove
    events:
      - http:
          method: delete
          path: child/{id}
          cors: true
          authorizer:
            name: authorize
            resultTtlInSeconds: 0


  # Contact person CRUD
  allContactPeople:
    handler: functions/contact-people.all
    events:
      - http:
          method: get
          path: contact-person
          cors: true
          authorizer:
            name: authorize
            resultTtlInSeconds: 0
          request:
            parameters:
              querystrings:
                url: true

  findContactPerson:
    handler: functions/contact-people.byId
    events:
      - http:
          method: get
          path: contact-person/{id}
          cors: true
          authorizer:
            name: authorize
            resultTtlInSeconds: 0
          request:
            paths:
              id: true

  createContactPerson:
    handler: functions/contact-people.create
    events:
      - http:
          method: post
          path: contact-person
          cors: true
          authorizer:
            name: authorize
            resultTtlInSeconds: 0

  updateContactPerson:
    handler: functions/contact-people.update
    events:
      - http:
          method: put
          path: contact-person/{id}
          cors: true
          authorizer:
            name: authorize
            resultTtlInSeconds: 0

  deleteContactPerson:
    handler: functions/contact-people.remove
    events:
      - http:
          method: delete
          path: contact-person/{id}
          cors: true
          authorizer:
            name: authorize
            resultTtlInSeconds: 0

  # Crew CRUD
  allCrewMembers:
    handler: functions/crew-members.all
    events:
      - http:
          method: get
          path: crew-member
          cors: true
          authorizer:
            name: authorize
            resultTtlInSeconds: 0
          request:
            parameters:
              querystrings:
                url: true

  findCrewMember:
    handler: functions/crew-members.byId
    events:
      - http:
          method: get
          path: crew-member/{id}
          cors: true
          authorizer:
            name: authorize
            resultTtlInSeconds: 0
          request:
            paths:
              id: true

  createCrewMember:
    handler: functions/crew-members.create
    events:
      - http:
          method: post
          path: crew-member
          cors: true
          authorizer:
            name: authorize
            resultTtlInSeconds: 0

  updateCrewMember:
    handler: functions/crew-members.update
    events:
      - http:
          method: put
          path: crew-member/{id}
          cors: true
          authorizer:
            name: authorize
            resultTtlInSeconds: 0

  deleteCrewMember:
    handler: functions/crew-members.remove
    events:
      - http:
          method: delete
          path: crew-member/{id}
          cors: true
          authorizer:
            name: authorize
            resultTtlInSeconds: 0

