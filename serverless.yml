service:
  name: serverless-hoepel-app

plugins:
  - serverless-webpack
  - serverless-offline
  - serverless-apigw-binary

package:
  exclude:
    - secrets.yml

custom:
  stage: ${opt:stage, self:provider.stage}
  secrets: ${file(secrets.yml):${self:custom.stage}}

  apigwBinary:
    types:
      - '*/*'

provider:
  name: aws
  runtime: nodejs6.10

  environment:
    DB_HOST: "${self:custom.secrets.DB_HOST}"
    DB_PORT: "${self:custom.secrets.DB_PORT}"
    DB_HTTPS: "${self:custom.secrets.DB_HTTPS}"
    DB_USER: "${self:custom.secrets.DB_USER}"

    AUTH0_AUDIENCE: "${self:custom.secrets.AUTH0_AUDIENCE}"
    AUTH0_DOMAIN: "${self:custom.secrets.AUTH0_DOMAIN}"
    AUTH0_CLIENT_ID: "${self:custom.secrets.AUTH0_CLIENT_ID}"
    AUTH0_CLIENT_SECRET: "${self:custom.secrets.AUTH0_CLIENT_SECRET}"


functions:
  authorize:
    handler: authorize.handler

  # Day CRUD
  allDays:
    handler: functions/days.all
    events:
      - http:
          method: get
          path: day
          cors: true
          authorizer:
            name: authorize
            resultTtlInSeconds: 0
          request:
            parameters:
              querystrings:
                url: true

  findDay:
    handler: functions/days.byId
    events:
      - http:
          method: get
          path: day/{id}
          cors: true
          authorizer:
            name: authorize
            resultTtlInSeconds: 0
          request:
            paths:
              id: true

  createDay:
    handler: functions/days.create
    events:
      - http:
          method: post
          path: day
          cors: true
          authorizer:
            name: authorize
            resultTtlInSeconds: 0

  updateDay:
    handler: functions/days.update
    events:
      - http:
          method: put
          path: day/{id}
          cors: true
          authorizer:
            name: authorize
            resultTtlInSeconds: 0

  deleteDay:
    handler: functions/days.remove
    events:
      - http:
          method: delete
          path: day/{id}
          cors: true
          authorizer:
            name: authorize
            resultTtlInSeconds: 0


  # Child CRUD
  allChildren:
    handler: functions/children.all
    events:
      - http:
          method: get
          path: child
          cors: true
          authorizer:
            name: authorize
            resultTtlInSeconds: 0
          request:
            parameters:
              querystrings:
                url: true

  findChild:
    handler: functions/children.byId
    events:
      - http:
          method: get
          path: child/{id}
          cors: true
          authorizer:
            name: authorize
            resultTtlInSeconds: 0
          request:
            paths:
              id: true

  createChild:
    handler: functions/children.create
    events:
      - http:
          method: post
          path: child
          cors: true
          authorizer:
            name: authorize
            resultTtlInSeconds: 0

  updateChild:
    handler: functions/children.update
    events:
      - http:
          method: put
          path: child/{id}
          cors: true
          authorizer:
            name: authorize
            resultTtlInSeconds: 0

  deleteChild:
    handler: functions/children.remove
    events:
      - http:
          method: delete
          path: child/{id}
          cors: true
          authorizer:
            name: authorize
            resultTtlInSeconds: 0


  # Contact person CRUD
  allContactPeople:
    handler: functions/contact-people.all
    events:
      - http:
          method: get
          path: contact-person
          cors: true
          authorizer:
            name: authorize
            resultTtlInSeconds: 0
          request:
            parameters:
              querystrings:
                url: true

  findContactPerson:
    handler: functions/contact-people.byId
    events:
      - http:
          method: get
          path: contact-person/{id}
          cors: true
          authorizer:
            name: authorize
            resultTtlInSeconds: 0
          request:
            paths:
              id: true

  createContactPerson:
    handler: functions/contact-people.create
    events:
      - http:
          method: post
          path: contact-person
          cors: true
          authorizer:
            name: authorize
            resultTtlInSeconds: 0

  updateContactPerson:
    handler: functions/contact-people.update
    events:
      - http:
          method: put
          path: contact-person/{id}
          cors: true
          authorizer:
            name: authorize
            resultTtlInSeconds: 0

  deleteContactPerson:
    handler: functions/contact-people.remove
    events:
      - http:
          method: delete
          path: contact-person/{id}
          cors: true
          authorizer:
            name: authorize
            resultTtlInSeconds: 0

  # Crew CRUD
  allCrewMembers:
    handler: functions/crew-members.all
    events:
      - http:
          method: get
          path: crew-member
          cors: true
          authorizer:
            name: authorize
            resultTtlInSeconds: 0
          request:
            parameters:
              querystrings:
                url: true

  findCrewMember:
    handler: functions/crew-members.byId
    events:
      - http:
          method: get
          path: crew-member/{id}
          cors: true
          authorizer:
            name: authorize
            resultTtlInSeconds: 0
          request:
            paths:
              id: true

  createCrewMember:
    handler: functions/crew-members.create
    events:
      - http:
          method: post
          path: crew-member
          cors: true
          authorizer:
            name: authorize
            resultTtlInSeconds: 0

  updateCrewMember:
    handler: functions/crew-members.update
    events:
      - http:
          method: put
          path: crew-member/{id}
          cors: true
          authorizer:
            name: authorize
            resultTtlInSeconds: 0

  deleteCrewMember:
    handler: functions/crew-members.remove
    events:
      - http:
          method: delete
          path: crew-member/{id}
          cors: true
          authorizer:
            name: authorize
            resultTtlInSeconds: 0


  # Child attendance API

  numberOfChildAttendances:
    handler: functions/child-attendances.numberOfChildAttendances
    events:
      - http:
          path: day/attendances/child
          method: get
          cors: true
          authorizer:
            name: authorize
            resultTtlInSeconds: 0

  childAttendancesOnDay:
    handler: functions/child-attendances.childAttendancesOnDay
    events:
      - http:
          path: day/{dayId}/attendances/child
          method: get

  findAllChildAttendancesPerChild:
    handler: functions/child-attendances.findAllPerChild
    events:
      - http:
          path: day/attendances/child/all
          method: get
          cors: true
          authorizer:
            name: authorize
            resultTtlInSeconds: 0
      - http:
          path: day/attendances/child/all/byChild
          method: get
          cors: true
          authorizer:
            name: authorize
            resultTtlInSeconds: 0

  findAllChildAttendancesPerDay:
    handler: functions/child-attendances.findAllPerDay
    events:
      - http:
          path: day/attendances/child/all/byDay
          method: get
          cors: true
          authorizer:
            name: authorize
            resultTtlInSeconds: 0

  findAllChildAttendancesRaw:
    handler: functions/child-attendances.findAllRaw
    events:
      - http:
          path: day/attendances/child/all/raw
          method: get
          cors: true
          authorizer:
            name: authorize
            resultTtlInSeconds: 0

  getAttendancesForChild:
    handler: functions/child-attendances.getAttendancesForChild
    events:
      - http:
          path: child/{childId}/attendances
          method: get
          cors: true
          authorizer:
            name: authorize
            resultTtlInSeconds: 0

  addAttendancesForChild:
    handler: functions/child-attendances.addAttendancesForChild
    events:
      - http:
          path: child/{childId}/attendances/{dayId}
          method: post
          cors: true
          authorizer:
            name: authorize
            resultTtlInSeconds: 0

  deleteAttendancesForChild:
    handler: functions/child-attendances.deleteAttendancesForChild
    events:
      - http:
          path: child/{childId}/attendances/{dayId}
          method: delete
          cors: true
          authorizer:
            name: authorize
            resultTtlInSeconds: 0


  # Crew attendance API

  numberOfCrewAttendances:
    handler: functions/crew-attendances.numberOfCrewAttendances
    events:
      - http:
          path: day/attendances/crew
          method: get
          cors: true
          authorizer:
            name: authorize
            resultTtlInSeconds: 0

  crewAttendancesOnDay:
    handler: functions/crew-attendances.crewAttendancesOnDay
    events:
      - http:
          path: day/{dayId}/attendances/crew
          method: get

  findAllCrewAttendancesPerCrew:
    handler: functions/crew-attendances.findAllPerCrew
    events:
      - http:
          path: day/attendances/crew/all
          method: get
          cors: true
          authorizer:
            name: authorize
            resultTtlInSeconds: 0
      - http:
          path: day/attendances/crew/all/byCrew
          method: get
          cors: true
          authorizer:
            name: authorize
            resultTtlInSeconds: 0

  findAllCrewAttendancesPerDay:
    handler: functions/crew-attendances.findAllPerDay
    events:
      - http:
          path: day/attendances/crew/all/byDay
          method: get
          cors: true
          authorizer:
            name: authorize
            resultTtlInSeconds: 0

  findAllCrewAttendancesRaw:
    handler: functions/crew-attendances.findAllRaw
    events:
      - http:
          path: day/attendances/crew/all/raw
          method: get
          cors: true
          authorizer:
            name: authorize
            resultTtlInSeconds: 0

  getAttendancesForCrew:
    handler: functions/crew-attendances.getAttendancesForCrew
    events:
      - http:
          path: crew/{crewId}/attendances
          method: get
          cors: true
          authorizer:
            name: authorize
            resultTtlInSeconds: 0

  addAttendancesForCrew:
    handler: functions/crew-attendances.addAttendancesForCrew
    events:
      - http:
          path: crew/{crewId}/attendances/{dayId}
          method: post
          cors: true
          authorizer:
            name: authorize
            resultTtlInSeconds: 0

  deleteAttendancesForCrew:
    handler: functions/crew-attendances.deleteAttendancesForCrew
    events:
      - http:
          path: crew/{crewId}/attendances/{dayId}
          method: delete
          cors: true
          authorizer:
            name: authorize
            resultTtlInSeconds: 0

# TODO
#  # Report API
#  downloadFiscalCertificates:
#    handler: functions/reports.downloadFiscalCertificates
#    events:
#      - http:
#          path: files/fiscalCertificate/:year
#          method: get
#          cors: true
#          authorizer:
#            name: authorize
#            resultTtlInSeconds: 0
#
#  downloadFiscalCertificateForChild:
#    handler: functions/reports.downloadFiscalCertificateForChild
#    events:
#      - http:
#          path: files/fiscalCertificate/:year/:childId
#          method: get
#          cors: true
#          authorizer:
#            name: authorize
#            resultTtlInSeconds: 0
#
#  downloadCompensation:
#    handler: functions/reports.downloadCompensation
#    events:
#      - http:
#          path: files/compensation/:year
#          method: get
#          cors: true
#          authorizer:
#            name: authorize
#            resultTtlInSeconds: 0
#
#  downloadCompensationForCrew:
#    handler: functions/reports.downloadCompensationForCrew
#    events:
#      - http:
#          path: files/compensation/:year/:crewId
#          method: get
#          cors: true
#          authorizer:
#            name: authorize
#            resultTtlInSeconds: 0
#
#  downloadChildrenPerDay:
#    handler: functions/reports.downloadChildrenPerDay
#    events:
#      - http:
#          path: files/childrenPerDay/:year
#          method: get
#          cors: true
#          authorizer:
#            name: authorize
#            resultTtlInSeconds: 0
#
#  downloadAttendancesOnDay:
#    handler: functions/reports.downloadAttendancesOnDay
#    events:
#      - http:
#          path: files/attendance/:dayId
#          method: get
#          cors: true
#          authorizer:
#            name: authorize
#            resultTtlInSeconds: 0

# TODO
#  # Export API
#  downloadChildren:
#    handler: functions/export.downloadChildren
#    events:
#      - http:
#          path: files/export/children
#          method: get
#          cors: true
#          authorizer:
#            name: authorize
#            resultTtlInSeconds: 0
#
#  downloadChildrenWithRemarks:
#    handler: functions/export.downloadChildrenWithRemarks
#    events:
#      - http:
#          path: files/export/children/with-comment
#          method: get
#          cors: true
#          authorizer:
#            name: authorize
#            resultTtlInSeconds: 0
#
#  downloadCrew:
#    handler: functions/export.downloadCrew
#    events:
#      - http:
#          path: files/export/crew
#          method: get
#          cors: true
#          authorizer:
#            name: authorize
#            resultTtlInSeconds: 0

  # Age groups API
  getAllAgeGroups:
    handler: functions/age-groups.getAll
    events:
      - http:
          path: age-groups
          method: get
          cors: true
          authorizer:
            name: authorize
            resultTtlInSeconds: 0

  updateAgeGroups:
    handler: functions/age-groups.createOrUpdate
    events:
      - http:
          path: age-groups
          method: put
          cors: true
          authorizer:
            name: authorize
            resultTtlInSeconds: 0

  # Auth API
  getAllUsers:
    handler: functions/auth.getAllUsers
    events:
      - http:
          path: auth/user
          method: get
          cors: true
          authorizer:
            name: authorize
            resultTtlInSeconds: 0

  getUserById:
    handler: functions/auth.getUserById
    events:
      - http:
          path: auth/user/{id}
          method: get
          cors: true
          authorizer:
            name: authorize
            resultTtlInSeconds: 0

  getTenantData:
    handler: functions/auth.getTenantData
    events:
      - http:
          path: auth/user/{userId}/{tenant}
          method: get
          cors: true
          authorizer:
            name: authorize
            resultTtlInSeconds: 0

  putTenantData:
    handler: functions/auth.putTenantData
    events:
      - http:
          path: auth/user/{userId}/{tenant}
          method: put
          cors: true
          authorizer:
            name: authorize
            resultTtlInSeconds: 0

  getAllPermissions:
    handler: functions/auth.getAllPermissions
    events:
      - http:
          path: auth/permissions
          method: get
          cors: true
          authorizer:
            name: authorize
            resultTtlInSeconds: 0

  getAllRoles:
    handler: functions/auth.getAllRoles
    events:
      - http:
          path: auth/roles
          method: get
          cors: true
          authorizer:
            name: authorize
            resultTtlInSeconds: 0

#### Superadmin API
#
## Tenants
#
#GET           /api/v1/tenants                                       cloud.speelplein.dashboard.controllers.api.TenantsController.list
#PUT           /api/v1/tenants/:name                                 cloud.speelplein.dashboard.controllers.api.TenantsController.create(name: String)
#GET           /api/v1/tenants/:name                                 cloud.speelplein.dashboard.controllers.api.TenantsController.details(name)
#POST          /api/v1/tenants/:name/generate-design-docs            cloud.speelplein.dashboard.controllers.api.TenantsController.generateDesignDocs(name)
#POST          /api/v1/tenants/:name/sync-to                         cloud.speelplein.dashboard.controllers.api.TenantsController.syncTo(name)
#POST          /api/v1/tenants/:name/sync-from                       cloud.speelplein.dashboard.controllers.api.TenantsController.syncFrom(name)
#
## Config
#
#GET           /api/v1/config/all                                    cloud.speelplein.dashboard.controllers.api.FrontendConfigController.getAllConfig
#POST          /api/v1/config/generate-design-docs                   cloud.speelplein.dashboard.controllers.api.FrontendConfigController.generateDesignDocs
#POST          /api/v1/config.json/:tenant                           cloud.speelplein.dashboard.controllers.api.FrontendConfigController.insertConfigDocument(tenant: String)
#PUT           /api/v1/config.json/:tenant                           cloud.speelplein.dashboard.controllers.api.FrontendConfigController.updateConfigDocument(tenant: String)
#
## Audit log
#
##POST          /api/v1/audit/log                                     cloud.speelplein.dashboard.controllers.api.
#GET           /api/v1/audit/log                                     cloud.speelplein.dashboard.controllers.api.AuditApiController.getLog(offset: Int ?= 0, count: Int ?= 50)
#
## Databases
#
#GET           /api/v1/databases                                     cloud.speelplein.dashboard.controllers.api.DatabaseController.list
#
#### Other routes
#
## Dashboard (frontend) config
#
#GET           /api/v1/config.json                                   cloud.speelplein.dashboard.controllers.api.FrontendConfigController.configJson
